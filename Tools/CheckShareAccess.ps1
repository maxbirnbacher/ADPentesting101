param(
    [Parameter(Mandatory=$false)]
    [string]$SharePath,
    [switch]$CheckAllSubdirectories,
    [string]$WordlistPath,
    [switch]$Help
)

# Help message
$helpMessage = @"
CheckShareAccess.ps1

Credit: Maximilian Birnbacher https://github.com/maxbirnbacher
-----
Usage: CheckShareAccess.ps1 -SharePath <SharePath> [-CheckAllSubdirectories] [-WordlistPath <WordlistPath>]

Options:
    -SharePath <SharePath>        Specifies the path to the share to check.
    -CheckAllSubdirectories       Checks all subdirectories of the specified share.
    -WordlistPath <WordlistPath> Specifies a path to a wordlist file for checking known subdirectories.
    -Help                         Displays this help message.

Example:
    .\CheckShareAccess.ps1 -SharePath "\\Server\Share" -CheckAllSubdirectories -WordlistPath "C:\path\to\wordlist.txt"
"@

# Display help message and exit if no parameters or -h is specified
if ($Help -or (-not $PSBoundParameters.ContainsKey('SharePath'))) {
    Write-Host $helpMessage
    exit
}

function Test-Access {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Path
    )
    try {
        $acl = Get-Acl -Path $Path -ErrorAction Stop
        $access = $acl.Access | Where-Object { $_.IdentityReference -eq ([System.Security.Principal.WindowsIdentity]::GetCurrent().Name) }
        return $access -ne $null
    } catch {
        return $false
    }
}

function Get-Directories {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Path,
        [switch]$Recurse
    )
    if ($Recurse) {
        Get-ChildItem -Path $Path -Directory -Recurse -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName }
    } else {
        Get-ChildItem -Path $Path -Directory -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName }
    }
    if (-not $?) {
        Write-Host "Access denied to $Path. Please check permissions."
    }
}

function Check-Directories {
    param(
        [Parameter(Mandatory=$true)]
        [string[]]$Directories,
        [switch]$UseWordlist
    )
    if ($UseWordlist) {
        $wordlist = Get-Content -Path $WordlistPath
        foreach ($dir in $Directories) {
            foreach ($word in $wordlist) {
                $path = Join-Path -Path $dir -ChildPath $word
                # Suppress error and check if the path exists
                $exists = Test-Path -Path $path -ErrorAction SilentlyContinue
                if ($exists) {
                    if (Test-Access -Path $path) {
                        Write-Host "Access granted to $path"
                    } else {
                        Write-Host "Access denied to $path"
                    }
                } elseif (-not $?) {
                    # If the path does not exist and the last command failed, it's likely due to access denied
                    Write-Host "Access denied to $path. Please check permissions."
                }
            }
        }
    } else {
        foreach ($dir in $Directories) {
            # Suppress error and check if the path exists
            $exists = Test-Path -Path $dir -ErrorAction SilentlyContinue
            if ($exists) {
                if (Test-Access -Path $dir) {
                    Write-Host "Access granted to $dir"
                } else {
                    Write-Host "Access denied to $dir"
                }
            } elseif (-not $?) {
                # If the path does not exist and the last command failed, it's likely due to access denied
                Write-Host "Access denied to $dir. Please check permissions."
            }
        }
    }
}

# Main script execution
$directories = Get-Directories -Path $SharePath -Recurse:$CheckAllSubdirectories
Check-Directories -Directories $directories -UseWordlist:$($WordlistPath -ne $null)
